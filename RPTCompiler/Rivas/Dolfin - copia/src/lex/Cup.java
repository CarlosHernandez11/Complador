
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Sep 23 15:35:26 MDT 2016
//----------------------------------------------------

package lex;

import java_cup.runtime.*;
import java.io.FileReader;
import java.util.Hashtable;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Stack;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Sep 23 15:35:26 MDT 2016
  */
public class Cup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Cup() {super();}

  /** Constructor which sets the default scanner. */
  public Cup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Cup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\007\000\002\002\004\000\002\002" +
    "\006\000\002\031\006\000\002\031\005\000\002\003\006" +
    "\000\002\003\005\000\002\003\006\000\002\003\004\000" +
    "\002\003\010\000\002\003\007\000\002\004\004\000\002" +
    "\004\003\000\002\005\005\000\002\005\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\010\006\000\002\010\005\000\002" +
    "\010\004\000\002\010\006\000\002\010\005\000\002\012" +
    "\006\000\002\012\005\000\002\012\006\000\002\012\005" +
    "\000\002\012\005\000\002\025\010\000\002\025\010\000" +
    "\002\034\002\000\002\025\010\000\002\035\002\000\002" +
    "\025\011\000\002\036\002\000\002\025\011\000\002\037" +
    "\002\000\002\025\010\000\002\040\002\000\002\025\010" +
    "\000\002\025\010\000\002\041\002\000\002\025\010\000" +
    "\002\026\005\000\002\026\005\000\002\026\004\000\002" +
    "\026\003\000\002\027\007\000\002\027\010\000\002\027" +
    "\010\000\002\027\011\000\002\027\006\000\002\027\007" +
    "\000\002\027\006\000\002\024\007\000\002\024\007\000" +
    "\002\024\005\000\002\024\005\000\002\030\005\000\002" +
    "\030\004\000\002\030\004\000\002\030\003\000\002\030" +
    "\005\000\002\011\004\000\002\011\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\023\012\000\002" +
    "\023\012\000\002\023\013\000\002\023\011\000\002\023" +
    "\013\000\002\023\012\000\002\023\005\000\002\023\007" +
    "\000\002\014\005\000\002\014\005\000\002\014\003\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\003\000\002\032\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\016\005\000\002\016\005\000\002\016\006" +
    "\000\002\016\004\000\002\022\005\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\004\066\006\001\002\000\004\011\013\001" +
    "\002\000\004\002\012\001\002\000\006\012\010\051\007" +
    "\001\002\000\004\012\011\001\002\000\004\011\ufff3\001" +
    "\002\000\004\011\ufff4\001\002\000\004\002\000\001\002" +
    "\000\004\051\014\001\002\000\006\003\300\042\301\001" +
    "\002\000\026\025\026\030\037\035\024\040\032\051\030" +
    "\053\040\054\035\057\022\064\020\065\027\001\002\000" +
    "\026\025\ufff5\030\ufff5\035\ufff5\040\ufff5\051\014\053\ufff5" +
    "\054\ufff5\057\ufff5\064\ufff5\065\ufff5\001\002\000\026\025" +
    "\ufff6\030\ufff6\035\ufff6\040\ufff6\051\ufff6\053\ufff6\054\ufff6" +
    "\057\ufff6\064\ufff6\065\ufff6\001\002\000\010\003\271\051" +
    "\270\052\272\001\002\000\004\002\uffff\001\002\000\004" +
    "\002\ufff0\001\002\000\006\030\037\057\022\001\002\000" +
    "\006\003\243\040\244\001\002\000\030\003\uffb7\025\uffb7" +
    "\030\uffb7\035\uffb7\040\uffb7\051\uffb7\053\uffb7\054\uffb7\057" +
    "\uffb7\064\uffb7\065\uffb7\001\002\000\004\040\172\001\002" +
    "\000\010\003\164\051\163\052\165\001\002\000\004\067" +
    "\160\001\002\000\030\003\uffb6\025\uffb6\030\uffb6\035\uffb6" +
    "\040\uffb6\051\uffb6\053\uffb6\054\uffb6\057\uffb6\064\uffb6\065" +
    "\uffb6\001\002\000\022\024\104\040\076\047\077\050\071" +
    "\051\102\052\070\056\101\060\074\001\002\000\030\003" +
    "\uffbc\025\026\030\uffbc\035\024\040\032\051\030\053\040" +
    "\054\035\057\uffbc\064\020\065\027\001\002\000\030\003" +
    "\uffb9\025\uffb9\030\uffb9\035\uffb9\040\uffb9\051\uffb9\053\uffb9" +
    "\054\uffb9\057\uffb9\064\uffb9\065\uffb9\001\002\000\004\003" +
    "\065\001\002\000\030\003\uffb8\025\uffb8\030\uffb8\035\uffb8" +
    "\040\uffb8\051\uffb8\053\uffb8\054\uffb8\057\uffb8\064\uffb8\065" +
    "\uffb8\001\002\000\006\003\064\057\063\001\002\000\006" +
    "\003\043\054\044\001\002\000\030\003\uffbb\025\uffbb\030" +
    "\uffbb\035\uffbb\040\uffbb\051\uffbb\053\uffbb\054\uffbb\057\uffbb" +
    "\064\uffbb\065\uffbb\001\002\000\030\003\uffba\025\uffba\030" +
    "\uffba\035\uffba\040\uffba\051\uffba\053\uffba\054\uffba\057\uffba" +
    "\064\uffba\065\uffba\001\002\000\004\030\056\001\002\000" +
    "\004\047\045\001\002\000\006\003\046\027\047\001\002" +
    "\000\004\012\062\001\002\000\024\025\026\030\052\035" +
    "\024\040\032\051\030\053\053\054\035\064\020\065\027" +
    "\001\002\000\004\030\060\001\002\000\030\003\uffc6\025" +
    "\uffc6\030\uffc6\035\uffc6\040\uffc6\051\uffc6\053\uffc6\054\uffc6" +
    "\057\uffc6\064\uffc6\065\uffc6\001\002\000\032\003\uffbf\012" +
    "\057\025\uffbf\030\uffbf\035\uffbf\040\uffbf\051\uffbf\053\uffbf" +
    "\054\uffbf\057\uffbf\064\uffbf\065\uffbf\001\002\000\006\003" +
    "\054\054\044\001\002\000\006\012\055\030\056\001\002" +
    "\000\030\003\uffbe\025\uffbe\030\uffbe\035\uffbe\040\uffbe\051" +
    "\uffbe\053\uffbe\054\uffbe\057\uffbe\064\uffbe\065\uffbe\001\002" +
    "\000\030\003\uffc3\025\uffc3\030\uffc3\035\uffc3\040\uffc3\051" +
    "\uffc3\053\uffc3\054\uffc3\057\uffc3\064\uffc3\065\uffc3\001\002" +
    "\000\030\003\uffc0\025\uffc0\030\uffc0\035\uffc0\040\uffc0\051" +
    "\uffc0\053\uffc0\054\uffc0\057\uffc0\064\uffc0\065\uffc0\001\002" +
    "\000\032\003\uffc1\012\061\025\uffc1\030\uffc1\035\uffc1\040" +
    "\uffc1\051\uffc1\053\uffc1\054\uffc1\057\uffc1\064\uffc1\065\uffc1" +
    "\001\002\000\030\003\uffc2\025\uffc2\030\uffc2\035\uffc2\040" +
    "\uffc2\051\uffc2\053\uffc2\054\uffc2\057\uffc2\064\uffc2\065\uffc2" +
    "\001\002\000\030\003\uffc5\025\uffc5\030\uffc5\035\uffc5\040" +
    "\uffc5\051\uffc5\053\uffc5\054\uffc5\057\uffc5\064\uffc5\065\uffc5" +
    "\001\002\000\004\002\ufff2\001\002\000\004\002\ufff1\001" +
    "\002\000\004\012\066\001\002\000\030\003\uffc4\025\uffc4" +
    "\030\uffc4\035\uffc4\040\uffc4\051\uffc4\053\uffc4\054\uffc4\057" +
    "\uffc4\064\uffc4\065\uffc4\001\002\000\010\003\uffbd\030\uffbd" +
    "\057\uffbd\001\002\000\102\003\uffa3\012\uffa3\013\uffa3\014" +
    "\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\025\uffa3\027\uffa3" +
    "\030\uffa3\035\uffa3\040\uffa3\041\uffa3\043\uffa3\044\uffa3\045" +
    "\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3" +
    "\054\uffa3\056\uffa3\057\uffa3\060\uffa3\064\uffa3\065\uffa3\070" +
    "\uffa3\071\uffa3\072\uffa3\001\002\000\102\003\uffa4\012\uffa4" +
    "\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\025" +
    "\uffa4\027\uffa4\030\uffa4\035\uffa4\040\uffa4\041\uffa4\043\uffa4" +
    "\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052" +
    "\uffa4\053\uffa4\054\uffa4\056\uffa4\057\uffa4\060\uffa4\064\uffa4" +
    "\065\uffa4\070\uffa4\071\uffa4\072\uffa4\001\002\000\102\003" +
    "\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6" +
    "\020\uffa6\025\uffa6\027\uffa6\030\uffa6\035\uffa6\040\uffa6\041" +
    "\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6" +
    "\051\uffa6\052\uffa6\053\uffa6\054\uffa6\056\uffa6\057\uffa6\060" +
    "\uffa6\064\uffa6\065\uffa6\070\uffa6\071\uffa6\072\uffa6\001\002" +
    "\000\102\003\uffab\012\uffab\013\uffab\014\uffab\015\uffab\016" +
    "\uffab\017\uffab\020\uffab\025\uffab\027\uffab\030\uffab\035\uffab" +
    "\040\uffab\041\uffab\043\uffab\044\132\045\uffab\046\133\047" +
    "\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\056\uffab" +
    "\057\uffab\060\uffab\064\uffab\065\uffab\070\uffab\071\uffab\072" +
    "\uffab\001\002\000\102\003\uffa1\012\uffa1\013\uffa1\014\uffa1" +
    "\015\uffa1\016\uffa1\017\uffa1\020\uffa1\025\uffa1\027\uffa1\030" +
    "\uffa1\035\uffa1\040\uffa1\041\uffa1\043\uffa1\044\uffa1\045\uffa1" +
    "\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054" +
    "\uffa1\056\uffa1\057\uffa1\060\uffa1\064\uffa1\065\uffa1\070\uffa1" +
    "\071\uffa1\072\uffa1\001\002\000\012\041\145\070\114\071" +
    "\111\072\110\001\002\000\022\024\104\040\076\047\077" +
    "\050\071\051\102\052\070\056\101\060\074\001\002\000" +
    "\102\003\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5" +
    "\017\uffa5\020\uffa5\025\uffa5\027\uffa5\030\uffa5\035\uffa5\040" +
    "\uffa5\041\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5" +
    "\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\056\uffa5\057" +
    "\uffa5\060\uffa5\064\uffa5\065\uffa5\070\uffa5\071\uffa5\072\uffa5" +
    "\001\002\000\040\013\127\014\124\015\125\016\121\017" +
    "\116\020\126\040\123\043\117\045\130\047\077\050\071" +
    "\051\102\052\070\056\101\060\074\001\002\000\102\003" +
    "\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0" +
    "\020\uffa0\025\uffa0\027\uffa0\030\uffa0\035\uffa0\040\uffa0\041" +
    "\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0" +
    "\051\uffa0\052\uffa0\053\uffa0\054\uffa0\056\uffa0\057\uffa0\060" +
    "\uffa0\064\uffa0\065\uffa0\070\uffa0\071\uffa0\072\uffa0\001\002" +
    "\000\102\003\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016" +
    "\uffa2\017\uffa2\020\uffa2\025\uffa2\027\uffa2\030\uffa2\035\uffa2" +
    "\040\uffa2\041\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047" +
    "\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\056\uffa2" +
    "\057\uffa2\060\uffa2\064\uffa2\065\uffa2\070\uffa2\071\uffa2\072" +
    "\uffa2\001\002\000\016\003\uff91\027\uff91\041\uff91\070\uff91" +
    "\071\uff91\072\uff91\001\002\000\004\040\106\001\002\000" +
    "\102\003\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7" +
    "\017\uffa7\020\uffa7\025\uffa7\027\uffa7\030\uffa7\035\uffa7\040" +
    "\uffa7\041\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7" +
    "\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\056\uffa7\057" +
    "\uffa7\060\uffa7\064\uffa7\065\uffa7\070\uffa7\071\uffa7\072\uffa7" +
    "\001\002\000\022\024\104\040\076\047\077\050\071\051" +
    "\102\052\070\056\101\060\074\001\002\000\012\041\112" +
    "\070\114\071\111\072\110\001\002\000\022\024\uff97\040" +
    "\uff97\047\uff97\050\uff97\051\uff97\052\uff97\056\uff97\060\uff97" +
    "\001\002\000\022\024\uff99\040\uff99\047\uff99\050\uff99\051" +
    "\uff99\052\uff99\056\uff99\060\uff99\001\002\000\016\003\uff94" +
    "\027\uff94\041\uff94\070\uff94\071\uff94\072\uff94\001\002\000" +
    "\022\024\104\040\076\047\077\050\071\051\102\052\070" +
    "\056\101\060\074\001\002\000\022\024\uff98\040\uff98\047" +
    "\uff98\050\uff98\051\uff98\052\uff98\056\uff98\060\uff98\001\002" +
    "\000\016\003\uff92\027\uff92\041\uff92\070\uff92\071\uff92\072" +
    "\uff92\001\002\000\020\040\uff9f\047\uff9f\050\uff9f\051\uff9f" +
    "\052\uff9f\056\uff9f\060\uff9f\001\002\000\020\040\123\047" +
    "\077\050\071\051\102\052\070\056\101\060\074\001\002" +
    "\000\022\003\uff93\027\uff93\041\uff93\043\117\045\130\070" +
    "\uff93\071\uff93\072\uff93\001\002\000\020\040\uff9b\047\uff9b" +
    "\050\uff9b\051\uff9b\052\uff9b\056\uff9b\060\uff9b\001\002\000" +
    "\020\040\123\047\077\050\071\051\102\052\070\056\101" +
    "\060\074\001\002\000\020\040\123\047\077\050\071\051" +
    "\102\052\070\056\101\060\074\001\002\000\020\040\uff9c" +
    "\047\uff9c\050\uff9c\051\uff9c\052\uff9c\056\uff9c\060\uff9c\001" +
    "\002\000\020\040\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d" +
    "\056\uff9d\060\uff9d\001\002\000\020\040\uff9e\047\uff9e\050" +
    "\uff9e\051\uff9e\052\uff9e\056\uff9e\060\uff9e\001\002\000\020" +
    "\040\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\056\uff9a\060" +
    "\uff9a\001\002\000\020\040\123\047\077\050\071\051\102" +
    "\052\070\056\101\060\074\001\002\000\102\003\uffac\012" +
    "\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac" +
    "\025\uffac\027\uffac\030\uffac\035\uffac\040\uffac\041\uffac\043" +
    "\uffac\044\132\045\uffac\046\133\047\uffac\050\uffac\051\uffac" +
    "\052\uffac\053\uffac\054\uffac\056\uffac\057\uffac\060\uffac\064" +
    "\uffac\065\uffac\070\uffac\071\uffac\072\uffac\001\002\000\016" +
    "\047\077\050\071\051\102\052\070\056\101\060\074\001" +
    "\002\000\016\047\077\050\071\051\102\052\070\056\101" +
    "\060\074\001\002\000\102\003\uffa9\012\uffa9\013\uffa9\014" +
    "\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\025\uffa9\027\uffa9" +
    "\030\uffa9\035\uffa9\040\uffa9\041\uffa9\043\uffa9\044\uffa9\045" +
    "\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9" +
    "\054\uffa9\056\uffa9\057\uffa9\060\uffa9\064\uffa9\065\uffa9\070" +
    "\uffa9\071\uffa9\072\uffa9\001\002\000\102\003\uffaa\012\uffaa" +
    "\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\025" +
    "\uffaa\027\uffaa\030\uffaa\035\uffaa\040\uffaa\041\uffaa\043\uffaa" +
    "\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052" +
    "\uffaa\053\uffaa\054\uffaa\056\uffaa\057\uffaa\060\uffaa\064\uffaa" +
    "\065\uffaa\070\uffaa\071\uffaa\072\uffaa\001\002\000\010\041" +
    "\137\043\117\045\130\001\002\000\102\003\uffa8\012\uffa8" +
    "\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\025" +
    "\uffa8\027\uffa8\030\uffa8\035\uffa8\040\uffa8\041\uffa8\043\uffa8" +
    "\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052" +
    "\uffa8\053\uffa8\054\uffa8\056\uffa8\057\uffa8\060\uffa8\064\uffa8" +
    "\065\uffa8\070\uffa8\071\uffa8\072\uffa8\001\002\000\022\003" +
    "\uff96\027\uff96\041\uff96\043\117\045\130\070\uff96\071\uff96" +
    "\072\uff96\001\002\000\102\003\uffad\012\uffad\013\uffad\014" +
    "\uffad\015\uffad\016\uffad\017\uffad\020\uffad\025\uffad\027\uffad" +
    "\030\uffad\035\uffad\040\uffad\041\uffad\043\uffad\044\132\045" +
    "\uffad\046\133\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad" +
    "\054\uffad\056\uffad\057\uffad\060\uffad\064\uffad\065\uffad\070" +
    "\uffad\071\uffad\072\uffad\001\002\000\012\041\144\070\114" +
    "\071\111\072\110\001\002\000\042\013\127\014\124\015" +
    "\125\016\121\017\116\020\126\040\123\041\137\043\117" +
    "\045\130\047\077\050\071\051\102\052\070\056\101\060" +
    "\074\001\002\000\016\003\uff95\027\uff95\041\uff95\070\uff95" +
    "\071\uff95\072\uff95\001\002\000\004\027\146\001\002\000" +
    "\024\025\uffd8\030\uffd8\035\uffd8\040\uffd8\051\uffd8\053\uffd8" +
    "\054\uffd8\064\uffd8\065\uffd8\001\002\000\024\025\026\030" +
    "\152\035\024\040\032\051\030\053\040\054\035\064\020" +
    "\065\027\001\002\000\006\003\154\030\155\001\002\000" +
    "\030\003\uffd7\025\uffd7\030\uffd7\035\uffd7\040\uffd7\051\uffd7" +
    "\053\uffd7\054\uffd7\057\uffd7\064\uffd7\065\uffd7\001\002\000" +
    "\032\003\uffce\012\153\025\uffce\030\uffce\035\uffce\040\uffce" +
    "\051\uffce\053\uffce\054\uffce\057\uffce\064\uffce\065\uffce\001" +
    "\002\000\030\003\uffcf\025\uffcf\030\uffcf\035\uffcf\040\uffcf" +
    "\051\uffcf\053\uffcf\054\uffcf\057\uffcf\064\uffcf\065\uffcf\001" +
    "\002\000\004\030\157\001\002\000\004\012\156\001\002" +
    "\000\030\003\uffd1\025\uffd1\030\uffd1\035\uffd1\040\uffd1\051" +
    "\uffd1\053\uffd1\054\uffd1\057\uffd1\064\uffd1\065\uffd1\001\002" +
    "\000\030\003\uffd0\025\uffd0\030\uffd0\035\uffd0\040\uffd0\051" +
    "\uffd0\053\uffd0\054\uffd0\057\uffd0\064\uffd0\065\uffd0\001\002" +
    "\000\020\040\123\047\077\050\071\051\102\052\070\056" +
    "\101\060\074\001\002\000\036\003\ufffd\012\162\025\ufffd" +
    "\030\ufffd\035\ufffd\040\ufffd\043\117\045\130\051\ufffd\053" +
    "\ufffd\054\ufffd\057\ufffd\064\ufffd\065\ufffd\001\002\000\030" +
    "\003\ufffe\025\ufffe\030\ufffe\035\ufffe\040\ufffe\051\ufffe\053" +
    "\ufffe\054\ufffe\057\ufffe\064\ufffe\065\ufffe\001\002\000\004" +
    "\041\170\001\002\000\030\003\uffe8\025\uffe8\030\uffe8\035" +
    "\uffe8\040\uffe8\051\uffe8\053\uffe8\054\uffe8\057\uffe8\064\uffe8" +
    "\065\uffe8\001\002\000\004\041\166\001\002\000\032\003" +
    "\uffe6\012\167\025\uffe6\030\uffe6\035\uffe6\040\uffe6\051\uffe6" +
    "\053\uffe6\054\uffe6\057\uffe6\064\uffe6\065\uffe6\001\002\000" +
    "\030\003\uffe7\025\uffe7\030\uffe7\035\uffe7\040\uffe7\051\uffe7" +
    "\053\uffe7\054\uffe7\057\uffe7\064\uffe7\065\uffe7\001\002\000" +
    "\032\003\uffe9\012\171\025\uffe9\030\uffe9\035\uffe9\040\uffe9" +
    "\051\uffe9\053\uffe9\054\uffe9\057\uffe9\064\uffe9\065\uffe9\001" +
    "\002\000\030\003\uffea\025\uffea\030\uffea\035\uffea\040\uffea" +
    "\051\uffea\053\uffea\054\uffea\057\uffea\064\uffea\065\uffea\001" +
    "\002\000\024\003\174\024\104\040\076\047\077\050\071" +
    "\051\102\052\070\056\101\060\074\001\002\000\014\027" +
    "\205\041\204\070\114\071\111\072\110\001\002\000\006" +
    "\027\176\041\175\001\002\000\004\027\201\001\002\000" +
    "\024\025\uffd6\030\uffd6\035\uffd6\040\uffd6\051\uffd6\053\uffd6" +
    "\054\uffd6\064\uffd6\065\uffd6\001\002\000\024\025\026\030" +
    "\152\035\024\040\032\051\030\053\040\054\035\064\020" +
    "\065\027\001\002\000\030\003\uffd5\025\uffd5\030\uffd5\035" +
    "\uffd5\040\uffd5\051\uffd5\053\uffd5\054\uffd5\057\uffd5\064\uffd5" +
    "\065\uffd5\001\002\000\024\025\uffdc\030\uffdc\035\uffdc\040" +
    "\uffdc\051\uffdc\053\uffdc\054\uffdc\064\uffdc\065\uffdc\001\002" +
    "\000\024\025\026\030\152\035\024\040\032\051\030\053" +
    "\040\054\035\064\020\065\027\001\002\000\030\003\uffdb" +
    "\025\uffdb\030\uffdb\035\uffdb\040\uffdb\051\uffdb\053\uffdb\054" +
    "\uffdb\057\uffdb\064\uffdb\065\uffdb\001\002\000\030\003\210" +
    "\025\uffd3\027\211\030\uffd3\035\uffd3\040\uffd3\051\uffd3\053" +
    "\uffd3\054\uffd3\064\uffd3\065\uffd3\001\002\000\024\025\uffde" +
    "\030\uffde\035\uffde\040\uffde\051\uffde\053\uffde\054\uffde\064" +
    "\uffde\065\uffde\001\002\000\024\025\026\030\152\035\024" +
    "\040\032\051\030\053\040\054\035\064\020\065\027\001" +
    "\002\000\030\003\uffdd\025\uffdd\030\uffdd\035\uffdd\040\uffdd" +
    "\051\uffdd\053\uffdd\054\uffdd\057\uffdd\064\uffdd\065\uffdd\001" +
    "\002\000\024\025\uffda\030\uffda\035\uffda\040\uffda\051\uffda" +
    "\053\uffda\054\uffda\064\uffda\065\uffda\001\002\000\026\003" +
    "\216\025\026\030\220\035\024\040\032\051\030\053\040" +
    "\054\035\064\020\065\027\001\002\000\024\025\026\030" +
    "\152\035\024\040\032\051\030\053\040\054\035\064\020" +
    "\065\027\001\002\000\030\003\uffd2\025\uffd2\030\uffd2\035" +
    "\uffd2\040\uffd2\051\uffd2\053\uffd2\054\uffd2\057\uffd2\064\uffd2" +
    "\065\uffd2\001\002\000\006\003\154\030\231\001\002\000" +
    "\030\003\uffdf\025\uffdf\030\uffdf\035\uffdf\040\uffdf\051\uffdf" +
    "\053\uffdf\054\uffdf\057\uffdf\064\uffdf\065\uffdf\001\002\000" +
    "\030\003\uffd4\025\uffd4\030\uffd4\035\uffd4\040\uffd4\051\uffd4" +
    "\053\uffd4\054\uffd4\057\uffd4\064\uffd4\065\uffd4\001\002\000" +
    "\030\003\uffe0\025\uffe0\030\uffe0\035\uffe0\040\uffe0\051\uffe0" +
    "\053\uffe0\054\uffe0\057\uffe0\064\uffe0\065\uffe0\001\002\000" +
    "\034\003\uffce\012\153\025\uffce\030\uffce\031\221\035\uffce" +
    "\040\uffce\051\uffce\053\uffce\054\uffce\057\uffce\064\uffce\065" +
    "\uffce\001\002\000\004\027\222\001\002\000\026\003\224" +
    "\025\026\030\225\035\024\040\032\051\030\053\040\054" +
    "\035\064\020\065\027\001\002\000\004\030\227\001\002" +
    "\000\030\003\uffc7\025\uffc7\030\uffc7\035\uffc7\040\uffc7\051" +
    "\uffc7\053\uffc7\054\uffc7\057\uffc7\064\uffc7\065\uffc7\001\002" +
    "\000\032\003\uffc9\012\226\025\uffc9\030\uffc9\035\uffc9\040" +
    "\uffc9\051\uffc9\053\uffc9\054\uffc9\057\uffc9\064\uffc9\065\uffc9" +
    "\001\002\000\030\003\uffcd\025\uffcd\030\uffcd\035\uffcd\040" +
    "\uffcd\051\uffcd\053\uffcd\054\uffcd\057\uffcd\064\uffcd\065\uffcd" +
    "\001\002\000\032\003\uffc8\012\230\025\uffc8\030\uffc8\035" +
    "\uffc8\040\uffc8\051\uffc8\053\uffc8\054\uffc8\057\uffc8\064\uffc8" +
    "\065\uffc8\001\002\000\030\003\uffcc\025\uffcc\030\uffcc\035" +
    "\uffcc\040\uffcc\051\uffcc\053\uffcc\054\uffcc\057\uffcc\064\uffcc" +
    "\065\uffcc\001\002\000\006\012\156\031\232\001\002\000" +
    "\004\027\233\001\002\000\024\025\026\030\234\035\024" +
    "\040\032\051\030\053\040\054\035\064\020\065\027\001" +
    "\002\000\004\012\240\001\002\000\004\030\236\001\002" +
    "\000\004\012\237\001\002\000\030\003\uffca\025\uffca\030" +
    "\uffca\035\uffca\040\uffca\051\uffca\053\uffca\054\uffca\057\uffca" +
    "\064\uffca\065\uffca\001\002\000\030\003\uffcb\025\uffcb\030" +
    "\uffcb\035\uffcb\040\uffcb\051\uffcb\053\uffcb\054\uffcb\057\uffcb" +
    "\064\uffcb\065\uffcb\001\002\000\024\025\026\030\152\035" +
    "\024\040\032\051\030\053\040\054\035\064\020\065\027" +
    "\001\002\000\030\003\uffd9\025\uffd9\030\uffd9\035\uffd9\040" +
    "\uffd9\051\uffd9\053\uffd9\054\uffd9\057\uffd9\064\uffd9\065\uffd9" +
    "\001\002\000\004\030\266\001\002\000\022\024\104\040" +
    "\076\047\077\050\071\051\102\052\070\056\101\060\074" +
    "\001\002\000\014\003\246\041\247\070\114\071\111\072" +
    "\110\001\002\000\004\012\265\001\002\000\004\034\250" +
    "\001\002\000\006\003\251\027\252\001\002\000\024\025" +
    "\026\030\260\035\024\040\032\051\030\053\040\054\035" +
    "\064\020\065\027\001\002\000\024\025\026\030\253\035" +
    "\024\040\032\051\030\053\040\054\035\064\020\065\027" +
    "\001\002\000\032\003\uffb2\012\257\025\uffb2\030\uffb2\035" +
    "\uffb2\040\uffb2\051\uffb2\053\uffb2\054\uffb2\057\uffb2\064\uffb2" +
    "\065\uffb2\001\002\000\004\030\255\001\002\000\032\003" +
    "\uffb0\012\256\025\uffb0\030\uffb0\035\uffb0\040\uffb0\051\uffb0" +
    "\053\uffb0\054\uffb0\057\uffb0\064\uffb0\065\uffb0\001\002\000" +
    "\030\003\uffb1\025\uffb1\030\uffb1\035\uffb1\040\uffb1\051\uffb1" +
    "\053\uffb1\054\uffb1\057\uffb1\064\uffb1\065\uffb1\001\002\000" +
    "\030\003\uffb5\025\uffb5\030\uffb5\035\uffb5\040\uffb5\051\uffb5" +
    "\053\uffb5\054\uffb5\057\uffb5\064\uffb5\065\uffb5\001\002\000" +
    "\004\012\264\001\002\000\004\030\262\001\002\000\004" +
    "\012\263\001\002\000\030\003\uffb3\025\uffb3\030\uffb3\035" +
    "\uffb3\040\uffb3\051\uffb3\053\uffb3\054\uffb3\057\uffb3\064\uffb3" +
    "\065\uffb3\001\002\000\030\003\uffb4\025\uffb4\030\uffb4\035" +
    "\uffb4\040\uffb4\051\uffb4\053\uffb4\054\uffb4\057\uffb4\064\uffb4" +
    "\065\uffb4\001\002\000\030\003\uffae\025\uffae\030\uffae\035" +
    "\uffae\040\uffae\051\uffae\053\uffae\054\uffae\057\uffae\064\uffae" +
    "\065\uffae\001\002\000\030\003\uffaf\025\uffaf\030\uffaf\035" +
    "\uffaf\040\uffaf\051\uffaf\053\uffaf\054\uffaf\057\uffaf\064\uffaf" +
    "\065\uffaf\001\002\000\004\002\001\001\002\000\004\041" +
    "\276\001\002\000\004\012\275\001\002\000\004\041\273" +
    "\001\002\000\032\003\uffe2\012\274\025\uffe2\030\uffe2\035" +
    "\uffe2\040\uffe2\051\uffe2\053\uffe2\054\uffe2\057\uffe2\064\uffe2" +
    "\065\uffe2\001\002\000\030\003\uffe3\025\uffe3\030\uffe3\035" +
    "\uffe3\040\uffe3\051\uffe3\053\uffe3\054\uffe3\057\uffe3\064\uffe3" +
    "\065\uffe3\001\002\000\030\003\uffe1\025\uffe1\030\uffe1\035" +
    "\uffe1\040\uffe1\051\uffe1\053\uffe1\054\uffe1\057\uffe1\064\uffe1" +
    "\065\uffe1\001\002\000\032\003\uffe4\012\277\025\uffe4\030" +
    "\uffe4\035\uffe4\040\uffe4\051\uffe4\053\uffe4\054\uffe4\057\uffe4" +
    "\064\uffe4\065\uffe4\001\002\000\030\003\uffe5\025\uffe5\030" +
    "\uffe5\035\uffe5\040\uffe5\051\uffe5\053\uffe5\054\uffe5\057\uffe5" +
    "\064\uffe5\065\uffe5\001\002\000\026\025\ufff9\030\ufff9\035" +
    "\ufff9\040\ufff9\051\ufff9\053\ufff9\054\ufff9\057\ufff9\064\ufff9" +
    "\065\ufff9\001\002\000\016\003\303\004\310\005\302\006" +
    "\305\007\306\010\304\001\002\000\032\012\uffed\017\uffed" +
    "\025\uffed\030\uffed\035\uffed\040\uffed\051\uffed\053\uffed\054" +
    "\uffed\057\uffed\064\uffed\065\uffed\001\002\000\004\012\315" +
    "\001\002\000\032\012\uffeb\017\uffeb\025\uffeb\030\uffeb\035" +
    "\uffeb\040\uffeb\051\uffeb\053\uffeb\054\uffeb\057\uffeb\064\uffeb" +
    "\065\uffeb\001\002\000\032\012\uffee\017\uffee\025\uffee\030" +
    "\uffee\035\uffee\040\uffee\051\uffee\053\uffee\054\uffee\057\uffee" +
    "\064\uffee\065\uffee\001\002\000\032\012\uffec\017\uffec\025" +
    "\uffec\030\uffec\035\uffec\040\uffec\051\uffec\053\uffec\054\uffec" +
    "\057\uffec\064\uffec\065\uffec\001\002\000\032\012\311\017" +
    "\312\025\ufffb\030\ufffb\035\ufffb\040\ufffb\051\ufffb\053\ufffb" +
    "\054\ufffb\057\ufffb\064\ufffb\065\ufffb\001\002\000\032\012" +
    "\uffef\017\uffef\025\uffef\030\uffef\035\uffef\040\uffef\051\uffef" +
    "\053\uffef\054\uffef\057\uffef\064\uffef\065\uffef\001\002\000" +
    "\026\025\ufffc\030\ufffc\035\ufffc\040\ufffc\051\ufffc\053\ufffc" +
    "\054\ufffc\057\ufffc\064\ufffc\065\ufffc\001\002\000\020\040" +
    "\123\047\077\050\071\051\102\052\070\056\101\060\074" +
    "\001\002\000\034\012\314\025\ufff7\030\ufff7\035\ufff7\040" +
    "\ufff7\043\117\045\130\051\ufff7\053\ufff7\054\ufff7\057\ufff7" +
    "\064\ufff7\065\ufff7\001\002\000\026\025\ufff8\030\ufff8\035" +
    "\ufff8\040\ufff8\051\ufff8\053\ufff8\054\ufff8\057\ufff8\064\ufff8" +
    "\065\ufff8\001\002\000\026\025\ufffa\030\ufffa\035\ufffa\040" +
    "\ufffa\051\ufffa\053\ufffa\054\ufffa\057\ufffa\064\ufffa\065\ufffa" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\006\002\004\005\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\015\004\014\001\001\000\002\001\001\000\024" +
    "\006\020\010\040\011\022\012\041\023\033\024\035\025" +
    "\024\031\030\033\032\001\001\000\006\003\015\004\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\266\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\013\071" +
    "\014\077\015\072\016\102\022\074\032\104\001\001\000" +
    "\022\010\040\011\066\012\041\023\033\024\035\025\024" +
    "\031\030\033\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\010\040\011\047\012\041\023\033\024\035\025\024\030" +
    "\050\031\030\033\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\112\001\001\000\016\013\071\014\142\015" +
    "\072\016\102\022\141\032\104\001\001\000\002\001\001" +
    "\000\014\013\071\014\117\015\072\020\121\032\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\013\071\014" +
    "\077\015\072\016\102\022\106\032\104\001\001\000\004" +
    "\021\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\013\071\014\077\015\072\016\114" +
    "\032\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\071\015\140\032\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\071\014" +
    "\137\015\072\032\104\001\001\000\012\013\071\014\135" +
    "\015\072\032\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\071" +
    "\015\130\032\104\001\001\000\002\001\001\000\006\013" +
    "\071\032\134\001\001\000\006\013\071\032\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\112\001\001\000\014\013\071\014\117\015\072\020" +
    "\121\032\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\146\001\001\000\024\010\040\011\147\012" +
    "\041\023\033\024\035\025\024\026\150\031\030\033\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\071\014" +
    "\160\015\072\032\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\013\071\014\077\015\072\016" +
    "\102\022\172\032\104\001\001\000\004\021\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\176\001" +
    "\001\000\024\010\040\011\147\012\041\023\033\024\035" +
    "\025\024\026\177\031\030\033\032\001\001\000\002\001" +
    "\001\000\004\035\201\001\001\000\024\010\040\011\147" +
    "\012\041\023\033\024\035\025\024\026\202\031\030\033" +
    "\032\001\001\000\002\001\001\000\004\041\211\001\001" +
    "\000\004\034\205\001\001\000\024\010\040\011\147\012" +
    "\041\023\033\024\035\025\024\026\206\031\030\033\032" +
    "\001\001\000\002\001\001\000\004\036\240\001\001\000" +
    "\026\010\040\011\213\012\041\023\033\024\035\025\024" +
    "\026\216\027\214\031\030\033\032\001\001\000\024\010" +
    "\040\011\147\012\041\023\033\024\035\025\024\026\212" +
    "\031\030\033\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\010\040\011" +
    "\222\012\041\023\033\024\035\025\024\031\030\033\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\010\040\011" +
    "\234\012\041\023\033\024\035\025\024\031\030\033\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\010\040" +
    "\011\147\012\041\023\033\024\035\025\024\026\241\031" +
    "\030\033\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\013\071\014\077\015\072\016\102\022\244\032" +
    "\104\001\001\000\004\021\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\010\040\011" +
    "\260\012\041\023\033\024\035\025\024\031\030\033\032" +
    "\001\001\000\022\010\040\011\253\012\041\023\033\024" +
    "\035\025\024\031\030\033\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\306\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\071\014\312\015\072" +
    "\032\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Cup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Cup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Cup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    vars = 0;
    
    }



    Hashtable<String, Lexema> tabla = new Hashtable<>();
    int contadorTemporales = 0; 
    int ifs = 0;
    int whiles = 0;
    int fors = 0;
    int switches = 0;
    int cases = 0;
    Stack caso = new Stack();

    public static int vars;
    StringBuilder m = new StringBuilder("");
    public void report_error(String a,String message, int left, int right) {
        compilador.setError("Se esperaba "+message+" Linea "+(left+1)+" Columna: "+(right+1));
        
    }

    public void report_error(String message, int left, int right) {
//        StringBuilder m = new StringBuilder("Error sintáctico ");

        compilador.setError(message+". Linea: "+(left+1)+" ; Columna: "+(right+1)+" ;");
        System.err.println(m);

    }

    public void report_error(String message) {
//        StringBuilder m = new StringBuilder("Error sintáctico ");

        compilador.setError(message);
        System.err.println(m);

    }
    public String newTemporal3(String a){
            String resultado;

            contadorTemporales++;
            compilador.tres("t" + contadorTemporales + " = " + a );
            resultado = "t" + contadorTemporales;

        return resultado;
            
    }

    public void newTemporal2(Lexema a, Lexema b){
            compilador.tres(a.lexema + " = " + b.tres);
            
    }

    public String newTemporal(Lexema a, Lexema op, Lexema b){
        String resultado;

            contadorTemporales++;
            compilador.tres("t" + contadorTemporales + " = " + a.tres + " " + op.lexema + " " + b.tres);
            resultado = "t" + contadorTemporales;

        return resultado;
    }

    public void report_error(String message, Object info) {
        if (info instanceof java_cup.runtime.Symbol){
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            m=new StringBuilder(message +" : ");
            if (s.left >= 0) {m.append(" Linea: "+(s.left+1));
                if (s.right >= 0)m.append(" Columna: "+(s.right+1));}}
            if(m.length()!=0)
                compilador.setError(m+"");
    }
    public static void main(String[] args){
        try {
                Cup sintactico = new Cup(new Lexer(new FileReader(args[0])));
try{
                Object result = sintactico.parse().value;}catch(Exception ex){


}
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Cup$actions {
  private final Cup parser;

  /** Constructor */
  CUP$Cup$actions(Cup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Cup$do_action(
    int                        CUP$Cup$act_num,
    java_cup.runtime.lr_parser CUP$Cup$parser,
    java.util.Stack            CUP$Cup$stack,
    int                        CUP$Cup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Cup$result;

      /* select the action based on the action number */
      switch (CUP$Cup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // condiciones ::= condicion 
            {
              Lexema RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema a = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		RESULT=a;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condiciones",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // condiciones ::= condiciones oplog condicion 
            {
              Lexema RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema a = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema b = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		

RESULT=a;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condiciones",16, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // condicion ::= expresion expresion 
            {
              Lexema RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema a = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		
compilador.setError("Error condicion invalida en renglon: "+(aleft+1)+"columna: "+(aright+1));

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicion",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // condicion ::= NEGACION PARENTESISIZQ condiciones PARENTESISDER 
            {
              Lexema RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema a = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicion",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // condicion ::= PARENTESISIZQ condiciones PARENTESISDER 
            {
              Lexema RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema a = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		
RESULT=a;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicion",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // condicion ::= expresion oprel expresion 
            {
              Lexema RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema a = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema b = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		


if(a.tipo.equals(b.tipo)){

}else{
compilador.setError("Error los tipos son incompatibles en la condicion! en "+"renglon: "+(aleft+1)+"columna: "+(aright+1));

}








RESULT=b;


              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicion",12, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // oplog ::= NOT 
            {
              Lexema RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema a = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		RESULT=a;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oplog",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // oplog ::= OR 
            {
              Lexema RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema a = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		RESULT=a;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oplog",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // oplog ::= AND 
            {
              Lexema RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema a = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 RESULT=a;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oplog",15, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // oprel ::= MAYORIGUALQUE 
            {
              Lexema RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema a = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		RESULT=a;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oprel",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // oprel ::= MAYORQUE 
            {
              Lexema RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema a = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		RESULT=a;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oprel",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // oprel ::= MENORIGUALQUE 
            {
              Lexema RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema a = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		RESULT=a;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oprel",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // oprel ::= MENORQUE 
            {
              Lexema RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema a = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		RESULT=a;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oprel",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // oprel ::= DISTINTODE 
            {
              Lexema RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema a = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		RESULT=a;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oprel",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // oprel ::= IGUAL 
            {
              Lexema RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema a = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		RESULT=a;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("oprel",14, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // final ::= FALSE 
            {
              Lexema RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema f = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
f.setTipo("boleano");
RESULT=f;


              CUP$Cup$result = parser.getSymbolFactory().newSymbol("final",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // final ::= TRUE 
            {
              Lexema RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema t = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		t.setTipo("boleano");
RESULT=t;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("final",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // final ::= ID 
            {
              Lexema RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 
if(!parser.tabla.containsKey(id.lexema)){
compilador.setError("Error  la variable: "+"'"+id.lexema+"'"+"necesita ser declarada"+"renglon: "+(idleft+1)+" columna: "+(idright+1));
id.setTipo("sintipo");
}else{

 id.temporal = id.lexema;
            id = parser.tabla.get(id.lexema);
            id.tres = id.lexema;
}

        
   RESULT=id; 

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("final",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // final ::= CADENA 
            {
              Lexema RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema c = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		   
    c.setTipo("cadena"); 
  
    RESULT=c; 
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("final",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // final ::= REALNUM 
            {
              Lexema RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema r = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		 
    r.setTipo("numerico"); 
   
    RESULT=r; 
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("final",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // final ::= INTEGERNUM 
            {
              Lexema RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema i = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    i.setTipo("numerico"); 
    i.temporal = i.lexema;
   
    RESULT=i;    
    
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("final",9, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // identificador ::= final 
            {
              Lexema RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema a = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		

RESULT=a;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("identificador",24, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // mul ::= identificador 
            {
              Lexema RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema f = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		RESULT=f;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("mul",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // mul ::= PARENTESISIZQ expresion PARENTESISDER 
            {
              Lexema RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema a = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		


RESULT=a;



              CUP$Cup$result = parser.getSymbolFactory().newSymbol("mul",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // mul ::= mul DIVISION identificador 
            {
              Lexema RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema a = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema b = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
if(a.tipo.equals("cadena")| b.tipo.equals("cadena")){
compilador.setError("La operación es incompatible para un tipo de dato dentro de la expresión en fila: "+(aleft+1)+" columna: "+(aright+1));

}
if(!a.tipo.equals(b.tipo)){
compilador.setError("Error los tipos son incompatibles en la fila: "+(aleft+1)+" columna: "+(aright+1));
}








RESULT=a;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("mul",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // mul ::= mul MULTIPLICACION identificador 
            {
              Lexema RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema a = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema b = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
if(a.tipo.equals("cadena")| b.tipo.equals("cadena")){
compilador.setError("La operación es incompatible para un tipo de dato dentro de la expresión en fila: "+(aleft+1)+" columna: "+(aright+1));

}
if(!a.tipo.equals(b.tipo)){
compilador.setError("Error los tipos son incompatibles en la fila: "+(aleft+1)+" columna: "+(aright+1));
}







RESULT= a;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("mul",11, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= mul 
            {
              Lexema RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema m = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
    RESULT=m;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= expresion RESTA mul 
            {
              Lexema RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema a = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema b = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
if(a.tipo.equals("cadena")| b.tipo.equals("cadena")){
compilador.setError("La operación es incompatible para un tipo de dato dentro de la expresión en fila: "+(aleft+1)+" columna: "+(aright+1));

}
if(!a.tipo.equals(b.tipo)){
compilador.setError("Error los tipos son incompatibles en la fila: "+(aleft+1)+" columna: "+(aright+1));
}




RESULT=a;



              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= expresion SUMA mul 
            {
              Lexema RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema a = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema b = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
if(a.tipo.equals("cadena")| b.tipo.equals("cadena")){
compilador.setError("La operación es incompatible para un tipo de dato dentro de la expresión en fila: "+(aleft+1)+" columna: "+(aright+1));

}
if(!a.tipo.equals(b.tipo)){
compilador.setError("Error los tipos son incompatibles en la fila: "+(aleft+1)+" columna: "+(aright+1));
}

RESULT= a;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ciclo_while ::= WHILE PARENTESISIZQ condiciones error PUNTOYCOMA 
            {
              Lexema RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		compilador.setError("Error se esperaba ')' en el renglon: "+(eleft+1)+"columna: "+(eright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("ciclo_while",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ciclo_while ::= WHILE error FIN 
            {
              Lexema RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		compilador.setError("Error desconocido en el ciclo while probablemente estructura incorrecta  o palabra mal escrita renglon: "+(eleft+1)+"columna: "+(eright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("ciclo_while",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ciclo_while ::= WHILE PARENTESISIZQ condiciones PARENTESISDER DO BEGIN sentencias FIN 
            {
              Lexema RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema f = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error falta punto y coma "+"renglon: "+(fleft+1)+"columna: "+(fright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("ciclo_while",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ciclo_while ::= WHILE PARENTESISIZQ condiciones PARENTESISDER DO BEGIN sentencias FIN PUNTOYCOMA 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("ciclo_while",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ciclo_while ::= WHILE PARENTESISIZQ condiciones PARENTESISDER DO BEGIN FIN 
            {
              Lexema RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema f = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error falta punto y coma "+"renglon: "+(fleft+1)+"columna: "+(fright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("ciclo_while",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ciclo_while ::= WHILE PARENTESISIZQ condiciones PARENTESISDER DO error sentencias FIN PUNTOYCOMA 
            {
              Lexema RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		compilador.setError("Error falta la palabra reservada INICIO renglon:  "+(eleft+1)+"columna: "+(eright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("ciclo_while",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-8)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ciclo_while ::= WHILE PARENTESISIZQ condiciones PARENTESISDER DO error FIN PUNTOYCOMA 
            {
              Lexema RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		compilador.setError("Error falta la palabra reservada INICIO renglon:  "+(eleft+1)+"columna: "+(eright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("ciclo_while",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ciclo_while ::= WHILE PARENTESISIZQ condiciones PARENTESISDER DO BEGIN FIN PUNTOYCOMA 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("ciclo_while",17, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-7)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentencia ::= asignacion 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentencia ::= condicion_if 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentencia ::= ciclo_repeat 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentencia ::= ciclo_while 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentencia ::= lee 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentencia ::= escribe 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencia",25, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentencias ::= sentencia 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencias",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentencias ::= sentencia sentencias 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("sentencias",7, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cuerpo_repeat ::= REPEAT error PUNTOYCOMA 
            {
              Lexema RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		compilador.setError("Error no se reconoce la sentencia renglon: "+(eleft+1)+"columna: "+(eright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo_repeat",22, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // cuerpo_repeat ::= FIN 
            {
              Lexema RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema f = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error falta punto y coma en renglon: "+(fleft+1)+"columna: "+(fright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo_repeat",22, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // cuerpo_repeat ::= FIN PUNTOYCOMA 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo_repeat",22, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cuerpo_repeat ::= sentencias FIN 
            {
              Lexema RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema f = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error falta punto y coma en renglon: "+(fleft+1)+"columna: "+(fright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo_repeat",22, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cuerpo_repeat ::= sentencias FIN PUNTOYCOMA 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo_repeat",22, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ciclo_repeat ::= REPEAT error FIN 
            {
              Lexema RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		compilador.setError("Error despues de REPEAT en el renglon: "+(eleft+1)+"columna: "+(eright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",18, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ciclo_repeat ::= UNTIL error PUNTOYCOMA 
            {
              Lexema RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		compilador.setError("Error despues de UNTIL en el renglon: "+(eleft+1)+"columna: "+(eright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",18, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ciclo_repeat ::= REPEAT UNTIL INTEGERNUM error PUNTOYCOMA 
            {
              Lexema RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		compilador.setError("Error falta la palabra reservada INICIO en renglon: "+(eleft+1)+"columna: "+(eright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",18, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ciclo_repeat ::= REPEAT UNTIL INTEGERNUM BEGIN cuerpo_repeat 
            {
              Lexema RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema n = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",18, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cuerpo_else ::= FIN ELSE BEGIN error 
            {
              Lexema RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error no se reconoce la sentencia  \n fila "+(eleft+1)+"columna: "+(eright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo_else",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cuerpo_else ::= FIN ELSE BEGIN sentencias FIN 
            {
              Lexema RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema e = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error falta punto y coma en \n fila "+(eleft+1)+"columna: "+(eright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo_else",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cuerpo_else ::= FIN ELSE BEGIN FIN 
            {
              Lexema RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema e = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error falta punto y coma en \n fila "+(eleft+1)+"columna: "+(eright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo_else",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cuerpo_else ::= sentencias FIN ELSE BEGIN sentencias FIN PUNTOYCOMA 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo_else",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cuerpo_else ::= sentencias FIN ELSE BEGIN FIN PUNTOYCOMA 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo_else",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cuerpo_else ::= FIN ELSE BEGIN sentencias FIN PUNTOYCOMA 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo_else",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cuerpo_else ::= FIN ELSE BEGIN FIN PUNTOYCOMA 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo_else",21, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cuerpo_if ::= FIN 
            {
              Lexema RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema f = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error falta punto y coma en renglon: "+(fleft+1)+"\ncolumna: "+(fright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo_if",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cuerpo_if ::= FIN PUNTOYCOMA 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo_if",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // cuerpo_if ::= sentencias error FIN 
            {
              Lexema RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		compilador.setError("Error falta punto y coma"+"renglon"+(eleft+1)+"columna: "+(eright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo_if",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // cuerpo_if ::= sentencias FIN PUNTOYCOMA 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("cuerpo_if",20, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condicion_if ::= IF PARENTESISIZQ condiciones PARENTESISDER NT$5 cuerpo_if 
            {
              Lexema RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Lexema) ((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema e = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicion_if",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$5 ::= 
            {
              Lexema RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema e = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
compilador.setError("Error falta la palabra reservada inicio en\n "+"fila: "+(eleft+1)+"columna: "+(eright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NT$5",31, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // condicion_if ::= IF PARENTESISIZQ condiciones PARENTESISDER BEGIN error 
            {
              Lexema RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error no se reconoce la sentencia  \nen la fila: "+(eleft+1)+"columna: "+(eright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicion_if",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // condicion_if ::= IF PARENTESISIZQ error BEGIN NT$4 cuerpo_if 
            {
              Lexema RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Lexema) ((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicion_if",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$4 ::= 
            {
              Lexema RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
compilador.setError("Error no se reconoce la sentencia  \nen la fila: "+(eleft+1)+"columna: "+(eright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NT$4",30, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // condicion_if ::= PARENTESISIZQ condiciones PARENTESISDER BEGIN NT$3 cuerpo_if 
            {
              Lexema RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Lexema) ((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema e = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicion_if",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$3 ::= 
            {
              Lexema RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema e = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
compilador.setError("Error no se reconoce la sentencia  \nen la fila: "+(eleft+1)+"columna: "+(eright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NT$3",29, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // condicion_if ::= IF PARENTESISIZQ condiciones PARENTESISDER error NT$2 cuerpo_if 
            {
              Lexema RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Lexema) ((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicion_if",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$2 ::= 
            {
              Lexema RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
compilador.setError("Error no se reconoce la sentencia  \nen la fila: "+(eleft+1)+"columna: "+(eright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NT$2",28, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // condicion_if ::= IF PARENTESISIZQ error PARENTESISDER BEGIN NT$1 cuerpo_if 
            {
              Lexema RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Lexema) ((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicion_if",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-6)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$1 ::= 
            {
              Lexema RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
compilador.setError("Error no se reconoce la sentencia  ')' \nen la fila: "+(eleft+1)+"columna: "+(eright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NT$1",27, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // condicion_if ::= IF PARENTESISIZQ condiciones BEGIN NT$0 cuerpo_if 
            {
              Lexema RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Lexema) ((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)).right;
		Lexema e = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-4)).value;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicion_if",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$0 ::= 
            {
              Lexema RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema e = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
compilador.setError("Errorse esperaba símbolo ')' \nen la fila: "+(eleft+1)+"columna: "+(eright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("NT$0",26, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condicion_if ::= IF PARENTESISIZQ condiciones PARENTESISDER BEGIN cuerpo_else 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicion_if",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condicion_if ::= IF PARENTESISIZQ condiciones PARENTESISDER BEGIN cuerpo_if 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("condicion_if",19, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lee ::= READ error PUNTOYCOMA 
            {
              Lexema RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		compilador.setError("Error estructura incompleta ó erronea en renglon: "+(eleft+1)+"columna: "+(eright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("lee",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lee ::= READ CADENA PARENTESISDER 
            {
              Lexema RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema p = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error falta punto y coma en renglon: "+(pleft+1)+"columna: "+(pright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("lee",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lee ::= READ CADENA PARENTESISDER PUNTOYCOMA 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("lee",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lee ::= READ ID PARENTESISDER 
            {
              Lexema RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema p = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error falta punto y coma en renglon: "+(pleft+1)+"columna: "+(pright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("lee",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lee ::= READ ID PARENTESISDER PUNTOYCOMA 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("lee",8, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // escribe ::= WRITE CADENA PARENTESISDER 
            {
              Lexema RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema p = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error falta punto y coma renglon: "+(pleft+1)+"columna: "+(pright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("escribe",6, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // escribe ::= WRITE CADENA PARENTESISDER PUNTOYCOMA 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("escribe",6, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // escribe ::= WRITE error 
            {
              Lexema RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error estructura erronea en funcion de escribir renglon: "+(eleft+1)+"columna: "+(eright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("escribe",6, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // escribe ::= WRITE ID PARENTESISDER 
            {
              Lexema RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema p = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error falta punto y coma renglon: "+(pleft+1)+"columna: "+(pright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("escribe",6, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // escribe ::= WRITE ID PARENTESISDER PUNTOYCOMA 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("escribe",6, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO ::= REAL 
            {
              Lexema RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema a = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
a.setTipo("numerico");
RESULT=a;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO ::= BOLEANO 
            {
              Lexema RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema a = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
a.setTipo("boleano");
RESULT=a;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO ::= CAD 
            {
              Lexema RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema a = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		

a.setTipo("cadena");
    RESULT=a;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPO ::= CARACTER 
            {
              Lexema RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema a = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		
a.setTipo("cadena");

RESULT=a;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPO ::= ENTERO 
            {
              Lexema RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema e = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		e.setTipo("numerico ");
RESULT=e;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // p1 ::= PUNTO 
            {
              Lexema RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema p = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error! se esperaba el fin del programa renglon: "+(pleft+1)+"\n"+"columna: "+(pright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("p1",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // p1 ::= FIN error 
            {
              Lexema RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error! se esperaba el fin del programa renglon: "+(pleft+1)+"\n"+"columna: "+(pright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("p1",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // p1 ::= FIN PUNTO 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("p1",4, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // p ::= PROGRAMA PUNTOYCOMA 
            {
              Lexema RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema p = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		compilador.setError("Error el programa no tiene nombre: "+"renglon:"+(pleft+1)+"\n"+"columna: "+(pright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("p",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // p ::= PROGRAMA ID PUNTOYCOMA 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("p",3, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaraciones ::= declaracion 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaraciones ::= declaracion declaraciones 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion ::= ID DOSPUNTOS TIPO IGUAL expresion 
            {
              Lexema RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema i = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		compilador.setError("Error falta punto y coma en el renglon: "+(ileft+1)+"columna: "+(iright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= ID DOSPUNTOS TIPO IGUAL expresion PUNTOYCOMA 
            {
              Lexema RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema t = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema exp = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		


if(!parser.tabla.containsKey(id.lexema)){


if(t.tipo.equals(exp.tipo)){
id.valor = "null";
            id.tipo = t.tipo;
            id.tres = id.lexema;
            parser.tabla.put(id.lexema,id);
}else{
compilador.setError("Error el tipo: "+t.lexema+" no es compatible con el valor : "+exp.lexema+"en el renglon: "+(idleft+1)+"columna:"+(idright+1));
}

}else{

compilador.setError("Error ya lavariable: "+id.lexema+" ya fue declarada anteriormente"+" renglon: "+(idleft+1)+"columna: "+(idright+1));
}





RESULT=id;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-5)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= ID error 
            {
              Lexema RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error no se reconoce la declaración renglon: "+(eleft+1)+"columna: "+(eright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= ID DOSPUNTOS error PUNTOYCOMA 
            {
              Lexema RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		compilador.setError("Error se esperaba tipo de dato renglon: "+(eleft+1)+"columna: "+(eright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion ::= ID DOSPUNTOS TIPO 
            {
              Lexema RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()).right;
		Lexema e = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.peek()).value;
		compilador.setError("Error falta punto y coma renglon: "+(eleft+1)+"columna: "+(eright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion ::= ID DOSPUNTOS TIPO PUNTOYCOMA 
            {
              Lexema RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema dp = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema t = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		

if(!parser.tabla.containsKey(id.lexema)){
id.valor = "null";
            id.tipo = t.tipo;
            
            parser.tabla.put(id.lexema,id);
            
            


}else{

compilador.setError("Error ya lavariable: "+id.lexema+" ya fue declarada anteriormente"+" renglon: "+(idleft+1)+"columna: "+(idright+1));
}



RESULT=id;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // asignacion ::= ID ASIG expresion 
            {
              Lexema RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-2)).value;
		compilador.setError("Error falta punto y coma en la instrucción de asignación en: fila: "+(idleft+1)+"columna: "+(idright+1));
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignacion",23, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-2)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // asignacion ::= ID ASIG expresion PUNTOYCOMA 
            {
              Lexema RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)).right;
		Lexema id = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-3)).value;
		
if(!parser.tabla.containsKey(id.lexema)){
compilador.setError("Error  la variable: "+"'"+id.lexema+"'"+"necesita ser declarada"+"renglon: "+(idleft+1)+" columna: "+(idright+1));
}

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("asignacion",23, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= p VAR declaraciones p1 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-3)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)).right;
		Lexema start_val = (Lexema)((java_cup.runtime.Symbol) CUP$Cup$stack.elementAt(CUP$Cup$top-1)).value;
		RESULT = start_val;
              CUP$Cup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-1)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Cup$parser.done_parsing();
          return CUP$Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= p VAR declaraciones sentencias p1 
            {
              Lexema RESULT =null;

              CUP$Cup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Cup$stack.elementAt(CUP$Cup$top-4)), ((java_cup.runtime.Symbol)CUP$Cup$stack.peek()), RESULT);
            }
          return CUP$Cup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

